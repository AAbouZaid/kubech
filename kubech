#
# This script is meant to be sourced in .bashrc file.
# Simple script to use different contexts/namespaces in multiple shells.
# Commands support autocomplete by default.

#
# Usage.
kubech() {
  cat <<EOF
NOTE:
  The command "kubech" is just a meta for other commands.
  kubech does nothing by itself.

USAGE:
  kcc             : List all contexts
  kcc <CONTEXT>   : Switch to context <CONTEXT>
  knn             : List all namespaces
  knn <NAMESPACE> : Switch to namespace <NAMESPACE>
EOF
}


#
# General.
kube_config_dir=$HOME/.kube/config.d
if ! [[ -d ${kube_config_dir} ]]; then
    mkdir -p ${kube_config_dir}
fi


#
# Generate kubectl config for a single context.
_kgg () {
    kube_context=${1}
    kube_namespace=${2:-default}
    kube_config_file="${kube_context}-${kube_namespace}"

    KUBECONFIG="${HOME}/.kube/config"
    kubectl config view            \
        --minify                   \
        --flatten                  \
        --context=${kube_context}  |
        sed -r 's/((\s+)cluster: .+)/\1\n\2namespace: '${kube_namespace}'/g' > ${kube_config_dir}/${kube_config_file}
}


#
# Change kubectl context.
kcc () {
    kube_context=${1}
    kube_namespace=${2:-default}
    kube_config_file="${kube_context}-${kube_namespace}"

    if [[ -n ${kube_context} ]]; then
        _kgg ${kube_context} ${kube_namespace}
        export KUBECONFIG="${kube_config_dir}/${kube_config_file}"
        kubectl config use-context ${kube_context}
    else
        kubectl config get-contexts --no-headers=true -o name
    fi
}

# Auto complete for "kcc" command.
_kcc_completions() {
    COMPREPLY=($(compgen -W "$(kcc | tr '\n' ' ')" "${COMP_WORDS[1]}"))
}

complete -F _kcc_completions kcc


#
# Change kubectl namespace
knn () {
    kube_namespace=${1:-default}

    if [[ -n ${1} ]]; then
        kcc $(kubectl config current-context) ${kube_namespace}
        echo "Namespace: ${kube_namespace}"
    else
        kubectl get namespaces --no-headers=true -o name | sed 's/^namespace\///g'
    fi
}

# Auto complete for "knn" command.
_knn_completions() {
    COMPREPLY=($(compgen -W "$(knn | tr '\n' ' ')" "${COMP_WORDS[1]}"))
}

complete -F _knn_completions knn
