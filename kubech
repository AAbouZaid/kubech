#
# This script is meant to be sourced in .bashrc file.
#
# Kubech is a simple tool that lets you set contexts/namespaces per shell/terminal.
# That's help you to manage multi Kubernetes cluster at the same time.

#
# Vars.
kube_config_dir=$HOME/.kube/config.d

# Set kcc/knn aliases along with kubechc/kubechn.
kubech_short_aliases=${KUBECH_SHORT_ALIASES:-True}


#
# Usage.
kubech() {
  cat <<EOF
NOTE:
  The command "kubech" is just a meta for other commands.
  kubech does nothing by itself.

USAGE:
  kubechc             : List all contexts
  kubechc <CONTEXT>   : Switch to context <CONTEXT>
  kubechn             : List all namespaces
  kubechn <NAMESPACE> : Switch to namespace <NAMESPACE>
EOF
}


#
# General.
if ! [[ -d ${kube_config_dir} ]]; then
    mkdir -p ${kube_config_dir}
fi


#
# Generate kubectl config for a single context.
_kubechg () {
    kube_context=${1}
    kube_namespace=${2:-default}
    kube_config_file="${kube_context}-${kube_namespace}"
    KUBECONFIG="${HOME}/.kube/config"

    kubectl config view            \
        --minify                   \
        --flatten                  \
        --context=${kube_context}  |
        sed -r 's/((\s+)cluster: .+)/\1\n\2namespace: '${kube_namespace}'/g' > ${kube_config_dir}/${kube_config_file}
}


#
# Change kubectl context.
kubechc () {
    kube_context=${1}
    kube_namespace=${2:-default}
    kube_config_file="${kube_context}-${kube_namespace}"

    if [[ -n ${kube_context} ]]; then
        _kubechg ${kube_context} ${kube_namespace}
        export KUBECONFIG="${kube_config_dir}/${kube_config_file}"
        kubectl config use-context ${kube_context}
    else
        kubectl config get-contexts --no-headers=true -o name
    fi
}

# Auto complete for "kubechc" command.
_kubechc_completions() {
    COMPREPLY=($(compgen -W "$(kubechc | tr '\n' ' ')" "${COMP_WORDS[1]}"))
}

complete -F _kubechc_completions kubechc


#
# Change kubectl namespace
kubechn () {
    kube_namespace=${1:-default}

    if [[ -n ${1} ]]; then
        kubechc $(kubectl config current-context) ${kube_namespace}
        echo "Namespace: ${kube_namespace}"
    else
        kubectl get namespaces --no-headers=true -o name | sed 's/^namespace\///g'
    fi
}

# Auto complete for "kubechn" command.
_kubechn_completions() {
    COMPREPLY=($(compgen -W "$(kubechn | tr '\n' ' ')" "${COMP_WORDS[1]}"))
}

complete -F _kubechn_completions kubechn


#
# Enable short names for lazy people like me :-)
if [[ ${kubech_short_aliases,,} == 'true' ]]; then
    alias kcc='kubechc'
    alias knn='kubechn'
    complete -F _kubechc_completions kcc
    complete -F _kubechn_completions knn
fi